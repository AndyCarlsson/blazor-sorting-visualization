@page "/"

@using System.Threading 
@using Algorithms
@using Service

@inject GetArray GetArray
@inject BubbleSortService BubbleSort
@inject MergeSortService MergeSort


<div class="main-wrapper">
    <div class="topnav">
        <button @onclick="@(e => CallUpdateArray())">Reset Array</button>
        <button @onclick="@(e => CallBubbleSort())">Bubble Sort</button>
        <button @onclick="@(e => CallMergeSort())">Merge Sort</button>
    </div>
    <div class="undernav">
        <button @onclick="@(e => CancelSort())">Cancel</button>
        <button @onclick="@(e => StartSort())">Go!</button>
    </div>

    <div class="array-container">
        @if (isBubble)
            barColor = "blue";
        @if (isMerge)
            barColor = "yellow";

        @for (int i = 0; i < GetArray.sortArr.Length; i++)
        {
            string heightValue = GetArray.sortArr[i].ToString() + "px";

            <div class="array-item"
                    style="height: @heightValue; 
                           background-color: @barColor"></div>
        }
        
    </div>
</div>


@code{

    CancellationTokenSource cts;
    public bool isPressed = false;

    bool isBubble = false;
    bool isMerge = false;
    string barColor = "";

    protected override void OnInitialized()
    {
        GetArray.GetRandomArray(this);
    }

    public void CallUpdateArray()
    {
        if(isPressed == false)
        GetArray.GetRandomArray(this);
    }

    void CallBubbleSort()
    {
        isBubble = true;
        isMerge = false;
    }

    void CallMergeSort()
    {
        isMerge = true;
        isBubble = false;
    }

    async void StartSort()
    {
        if (isMerge)
        {
            if (isPressed == false)
            {
                try
                {
                    isPressed = true;
                    cts = new CancellationTokenSource();
                    await MergeSort.MergeSort(GetArray.sortArr, 0, GetArray.sortArr.Length - 1, this, cts.Token);
                }
                catch (Exception)
                {
                    cts.Dispose();
                }
            }
        }
        if (isBubble)
        {
            if (isPressed == false)
            {
                try
                {
                    isPressed = true;
                    cts = new CancellationTokenSource();
                    await BubbleSort.BubbleSort(GetArray.sortArr, this, cts.Token);
                }
                catch (Exception)
                {
                    cts.Dispose();
                }
            }
        }

    }

    void CancelSort()
    {
        if(isPressed == true)
        cts.Cancel();

        isPressed = false;
    }

    public void UpdateUI()
    {
        this.StateHasChanged();
    }

}