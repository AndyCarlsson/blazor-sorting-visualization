@page "/"

@using System.Threading 
@using Algorithms
@using Service

@inject GetArray GetArray
@inject BubbleSortService BubbleSort
@inject MergeSortService MergeSort


<div class="main-wrapper">
    <div class="topnav">
        <button @onclick="@(e => CallUpdateArray())">Reset Array</button>
        <button @onclick="@(e => CallBubbleSort())">Bubble Sort</button>
        <button @onclick="@(e => CallMergeSort())">Merge Sort</button>
    </div>

    <div class="array-container">
        @if (isBubble)
            barColor = "blue";

        @for (int i = 0; i < GetArray.sortArr.Length; i++)
        {
            string heightValue = GetArray.sortArr[i].ToString() + "px";

            <div class="array-item"
                    style="height: @heightValue; 
                           background-color: @barColor"></div>
        }
        
    </div>
</div>


@code{

    CancellationTokenSource cts;
    public bool isPressed = false;

    bool isBubble = false;
    string barColor = "";

    protected override void OnInitialized()
    {
        GetArray.GetRandomArray(this);
    }

    public void CallUpdateArray()
    {
        if (isPressed == true)
        {
            cts.Cancel();
            isPressed = false;
        }
        else
        {
            GetArray.GetRandomArray(this);
        }
    }

    public async void CallBubbleSort()
    {
        isBubble = true;
        if (isPressed == false)
        {
            try
            {
                isPressed = true;
                cts = new CancellationTokenSource();
                await BubbleSort.BubbleSort(GetArray.sortArr, this, cts.Token);
            }
            catch (Exception)
            {
                cts.Dispose();
            }

        }
    }

    public async void CallMergeSort()
    {
        if (isPressed == false)
        {
            try
            {
                isPressed = true;
                cts = new CancellationTokenSource();
                await MergeSort.MergeSortAsync(GetArray.sortArr, 0, GetArray.sortArr.Length - 1, this, cts.Token);
            }
            catch (Exception)
            {
                cts.Dispose();
            }
        }
    }

    public void UpdateUI()
    {
        this.StateHasChanged();
    }

}