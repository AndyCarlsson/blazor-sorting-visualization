@page "/"

@using System.Threading 
@using Algorithms
@using Service

@inject GetArray GetArray
@inject BubbleSortService BubbleSort
@inject MergeSortService MergeSort


    <div class="main-wrapper">
        @if (isBubble)
        {
            bubbleId = "setColor";
            mergeId = "";
        }
        @if (isMerge)
        {
            mergeId = "setColor";
            bubbleId = "";
        }
        @if (isSmall)
        {
            smallArrId = "setColor";
            mediumArrId = "";
            bigArrId = "";
        }
         @if (isMedium)
        {
            smallArrId = "";
            mediumArrId = "setColor";
            bigArrId = "";
        }
          @if (isBig)
        {
            smallArrId = "";
            mediumArrId = "";
            bigArrId = "setColor";
        }
        <div class="topnav">
            <div class="settings-nav">
                <div>
                    <p class="tut-text">1. Set array size</p>
                </div>
                <div class="settings-nav-buttons">
                    <button @onclick="@(e => CallUpdateArray())">Refresh Array</button>
                    <button id="@smallArrId" @onclick="@(e => CallSmallArray())">Small</button>
                    <button id="@mediumArrId" @onclick="@(e => CallMediumArray())">Medium</button>
                    <button id="@bigArrId" @onclick="@(e => CallBigArray())">Big</button>
                </div>
            </div>
            <div class="line"></div>
            <div class="settings-nav">
                <div>
                    <p class="tut-text">2. Choose algorithm</p>
                </div>
                <div class="settings-nav-buttons">
                    <button id="@bubbleId" @onclick="@(e => CallBubbleSort())">Bubble Sort</button>
                    <button id="@mergeId" @onclick="@(e => CallMergeSort())">Merge Sort</button>
                </div>
            </div>
            <div class="line"></div>
            <div class="settings-nav">
                <div>
                    <p class="tut-text">3. Press Go! to see visualization</p>
                </div>
                <div class="settings-nav-buttons">
                    <button @onclick="@(e => CancelSort())">Cancel</button>
                    <button @onclick="@(e => StartSort())">Go!</button>
                </div>
            </div>
        </div>

        <div class="array-container">

            @for (int i = 0; i < GetArray.sortArr.Length; i++)
            {
                string heightValue = GetArray.sortArr[i].ToString() + "px";

                <div class="array-item"
                     style="height: @heightValue;
                 background-color: @barColor"></div>
            }

        </div>
    </div>


@code{

    CancellationTokenSource cts;
    public bool isPressed = false;

    bool isBubble = false;
    bool isMerge = false;
    bool isSmall = false;
    bool isMedium = false;
    bool isBig = false;
    string mergeId = "";
    string bubbleId = "";
    string smallArrId = "";
    string mediumArrId = "";
    string bigArrId = "";

    string barColor = "";

    protected override void OnInitialized()
    {
        GetArray.GetRandomArray(this);
    }

    public void CallUpdateArray()
    {
        if(isPressed == false)
            GetArray.GetRandomArray(this);
    }

    public void CallSmallArray()
    {
        isSmall = true;
        isMedium = false;
        isBig = false;
        if(isPressed == false)
            GetArray.GetSmallArray(this);
    }

    public void CallMediumArray()
    {
        isSmall = false;
        isMedium = true;
        isBig = false;
        if (isPressed == false)
            GetArray.GetMediumArray(this);
    }

    public void CallBigArray()
    {
        isSmall = false;
        isMedium = false;
        isBig = true;
        if (isPressed == false)
            GetArray.GetBigArray(this);
    }


    void CallBubbleSort()
    {
        isBubble = true;
        isMerge = false;
    }

    void CallMergeSort()
    {
        isMerge = true;
        isBubble = false;
    }

    async void StartSort()
    {
        if (isMerge)
        {
            if (isPressed == false)
            {
                try
                {
                    isPressed = true;
                    cts = new CancellationTokenSource();
                    await MergeSort.MergeSort(GetArray.sortArr, 0, GetArray.sortArr.Length - 1, this, cts.Token);
                }
                catch (Exception)
                {
                    cts.Dispose();
                }
            }
        }
        if (isBubble)
        {
            if (isPressed == false)
            {
                try
                {
                    isPressed = true;
                    cts = new CancellationTokenSource();
                    await BubbleSort.BubbleSort(GetArray.sortArr, this, cts.Token);
                }
                catch (Exception)
                {
                    cts.Dispose();
                }
            }
        }
    }

    void CancelSort()
    {
        if(isPressed == true)
            cts.Cancel();

        isPressed = false;
    }

    public void UpdateUI()
    {
        this.StateHasChanged();
    }

}